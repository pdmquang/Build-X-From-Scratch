# -*- coding: utf-8 -*-
"""Feedforward.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LThE29CSH0X_ueCMM1ph_SZ4a7XD3n8o
"""

import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms
from torchinfo import summary

# Device configuration
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Hyper-parameters
seq_len = 28
input_size = 28 # MNIST image
hidden_size = 500
num_layers = 2
num_classes = 10
num_epochs = 5
batch_size = 100
learning_rate = 0.001

# Download MNIST dataset
train_dataset = torchvision.datasets.MNIST(root='data',
                                           train=True,
                                           transform=transforms.ToTensor(),
                                           download=True)

test_dataset = torchvision.datasets.MNIST(root='data',
                                          train=False,
                                          transform=transforms.ToTensor())

# Data Loader
train_loader = torch.utils.data.DataLoader(dataset=train_dataset,
                                           batch_size=batch_size,
                                           shuffle=True)
test_loader = torch.utils.data.DataLoader(dataset=test_dataset,
                                          batch_size=batch_size,
                                          shuffle=False)

# item = next(x for x in train_loader)
# item[0].shape

# device

# Fully connected neural network with 1 hidden layer
class RNN_simple(nn.Module):
  def __init__(self, input_size, hidden_size, num_layers, num_classes):
    super(RNN_simple, self).__init__()
    self.hidden_size = hidden_size
    self.num_layers = num_layers

    self.rnn = nn.RNN(input_size, hidden_size,
                      num_layers=num_layers, batch_first=True)
    self.fc = nn.Linear(hidden_size, num_classes) # Initilize Linear object

  def forward(self, x):
    '''
    Input: (N, L, Hin) when batch_first=True
    '''
    # D * n_layers, N, Hout
    h0 = torch.zeros(self.num_layers, x.size(0), self.hidden_size)
    h0 = h0.to(device)
    # out: tensor of shape(batch_size, seq_length, D*hidden_size)
    # D = 2 if bidirectional, else 1
    out, _ = self.rnn(x, h0)

    # Expected shape [100, 10]
    out = self.fc(out[:,-1,:]) # all 1st dim, last 2nd dim, all 3rd dim

    return out

model = RNN_simple(input_size, hidden_size, num_layers, num_classes).to(device)
# summary(model, input_size=(batch_size, seq_len, input_size)) # (batch_size, channels, height, width)

# Intilize Loss and Optimizer
criterion = nn.CrossEntropyLoss() # Intialize Loss object (e.g CrossEntropy, MSE, etc)
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate) # Intilize Optimizer object (e.g SGD, Adam, etc)

# Train the model
total_step = len(train_loader)
for epoch in range(num_epochs):
  for i, (images, labels) in enumerate(train_loader): # multiple images because train_loader loads by batches (e.g 32 images)
    # 1) Move tensors to the configured device
    # Input: ( N, Color, Height, Width ) or ( Color, Height, Width)
    images = images.reshape(-1, seq_len, input_size).to(device) # seq_len=28, input_size=28 by COLOR_CHANNEL=1
    labels = labels.to(device)

    # 2) Forward pass
    # - Compute prediction
    preds = model(images)
    # - Compute Loss
    loss = criterion(preds, labels)

    # 3) Backward (Compute Gradient) and optimize
    # Compute gradient via backpropagation
    optimizer.zero_grad() # Reset the gradient, only use gradient on current batch
    loss.backward()
    # Update model parameters
    optimizer.step()

    if (i+100) % 100 == 0: # Every 100 batches
      print(f'Epoch [{epoch}/{num_epochs}], Step [{i}/{total_step}], Loss: {loss.item():.4f}')

# item = next(x for x in test_loader)
# item[0].shape

# Test the model
# In test phase, we don't need to compute gradients (for memory efficiency)
with torch.no_grad():
    correct = 0
    total = 0
    for images, labels in test_loader:
        images = images.reshape(-1, seq_len, input_size).to(device) # seq_len=28, input_size=28 by COLOR_CHANNEL=1
        labels = labels.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

    print('Accuracy of the network on the 10000 test images: {} %'.format(100 * correct / total))

# Save the model checkpoint
torch.save(model.state_dict(), 'model.ckpt')

